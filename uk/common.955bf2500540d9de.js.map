{"version":3,"file":"common.955bf2500540d9de.js","mappings":"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","names":["BrowserRenderDirective","constructor","platformShield","viewContainer","templateRef","this","ngOnInit","isPlatformBrowser","createEmbeddedView","clear","static","_angular_core__WEBPACK_IMPORTED_MODULE_1__","selectors","isUserTimingAPISupported","performance","now","mark","measure","clearMarks","clearMeasures","isPerformanceObservableSupported","PerformanceObserver","prototype","isNodeJSEnv","Object","toString","call","process","marksMap","marksObserver","getTimeNow","Date","markName","undefined","start","obs","list","getEntries","find","f","name","disconnect","observe","entryTypes","end","markNameToCompare","startTime","duration","entryType","getEntriesByName","pop","i0","NGX_SKELETON_LOADER_CONFIG","InjectionToken","NgxSkeletonLoaderComponent","config","appearance","animation","theme","loadingText","count","ariaLabel","items","validateInputValues","test","isDevMode","console","error","length","allowedAnimations","indexOf","String","join","ngOnChanges","changes","key","isFirstChange","previousValue","currentValue","ngAfterViewInit","ngOnDestroy","ɵfac","ɵcmp","decls","i1","styles","NgxSkeletonLoaderModule","ngModule","providers","provide","useValue","ɵmod","ɵinj","CommonModule"],"sourceRoot":"webpack:///","sources":["./libs/shared/src/lib/platform-shield/directives/browser-render.directive.ts","./node_modules/perf-marks/dist/es2020/is-user-timing-api-supported.js","./node_modules/perf-marks/dist/es2020/is-performance-observable-supported.js","./node_modules/perf-marks/dist/es2020/is-nodejs-env.js","./node_modules/perf-marks/dist/es2020/marks.js","./node_modules/ngx-skeleton-loader/fesm2020/ngx-skeleton-loader.mjs"],"sourcesContent":["import { Directive, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\n\nimport { PlatformShieldService } from '../services/platform-shield.service';\n\n@Directive({\n  selector: '[browserRender]'\n})\nexport class BrowserRenderDirective implements OnInit {\n\n  constructor(\n    private readonly platformShield: PlatformShieldService,\n    private readonly viewContainer: ViewContainerRef,\n    private readonly templateRef: TemplateRef<HTMLElement>,\n  ) {}\n\n  ngOnInit(): void {\n    if (this.platformShield.isPlatformBrowser()) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n    } else {\n      this.viewContainer.clear();\n    }\n  }\n\n}\n","/**\n * Boolean with the result of the check if User Timing API\n * is supported for the current browser/NodeJS version\n *\n * @returns boolean\n *\n */\nconst isUserTimingAPISupported = typeof performance !== 'undefined' &&\n    typeof performance.now !== 'undefined' &&\n    typeof performance.mark === 'function' &&\n    typeof performance.measure === 'function' &&\n    (typeof performance.clearMarks === 'function' || typeof performance.clearMeasures === 'function');\nexport { isUserTimingAPISupported };\n","/**\n * Boolean with the result of the check if PerformanceObservable\n * is supported for the current browser/NodeJS version\n *\n * @returns boolean\n *\n */\nconst isPerformanceObservableSupported = typeof PerformanceObserver !== 'undefined' &&\n    // eslint-disable-next-line compat/compat\n    typeof PerformanceObserver.prototype !== 'undefined' &&\n    // eslint-disable-next-line compat/compat\n    typeof PerformanceObserver.prototype.constructor === 'function';\nexport { isPerformanceObservableSupported };\n","/**\n * Boolean with the result of the check if package\n * is running on the browser or in a NodeJS environment\n *\n * @returns boolean\n *\n */\nconst isNodeJSEnv = Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n// Interesting fact:\n// Some bundlers are resolving `process`, so it needs to check for process.release.name\n// since it's a NodeJS only environment value.\n// More details in https://nodejs.org/api/process.html#process_process_release\nexport { isNodeJSEnv };\n","import { isUserTimingAPISupported } from './is-user-timing-api-supported';\nimport { isPerformanceObservableSupported } from './is-performance-observable-supported';\nimport { isNodeJSEnv } from './is-nodejs-env';\n// Map() is not used in order to decrease the bundle\nlet marksMap = {};\nlet marksObserver = {};\n/**\n * Get the current time based on User Timing API or Date\n *\n * @returns number\n *\n */\nconst getTimeNow = () => (isUserTimingAPISupported ? performance.now() : Date.now());\n/**\n * Clear marks and measure of performance event\n *\n * @param markName - Performance marker to be checked\n *\n * @returns void\n *\n */\nconst clear = (markName) => {\n    marksMap[markName] = undefined;\n    // Removes PerformanceObserver references from memory\n    if (!!marksObserver[markName]) {\n        marksObserver[markName] = undefined;\n    }\n    if (!isUserTimingAPISupported) {\n        return;\n    }\n    // Some versions of NodeJS doesn't support this method\n    if (!isNodeJSEnv) {\n        performance.clearMeasures(markName);\n    }\n    performance.clearMarks(markName);\n};\n/**\n * Start performance measure of event\n *\n * @param markName - Performance marker to be started\n *\n * @returns number\n *\n */\nconst start = (markName) => {\n    if (isUserTimingAPISupported) {\n        if (isNodeJSEnv && isPerformanceObservableSupported) {\n            // eslint-disable-next-line compat/compat\n            const obs = new PerformanceObserver(list => {\n                marksObserver[markName] = list.getEntries().find(f => f.name === markName);\n                obs.disconnect();\n            });\n            obs.observe({ entryTypes: ['measure'] });\n        }\n        performance.mark(markName);\n    }\n    marksMap[markName] = getTimeNow();\n};\n/**\n * Finishes performance measure of event and\n * clear marks and measure if applicable\n *\n * @param markName - Performance marker to be checked\n * @param markNameToCompare - Optional mark to compare to\n *\n * @returns PerfMarksPerformanceEntry\n *\n */\nconst end = (markName, markNameToCompare) => {\n    try {\n        const startTime = marksMap[markName];\n        if (!isUserTimingAPISupported) {\n            return startTime\n                ? { duration: getTimeNow() - startTime, startTime, entryType: 'measure', name: markName }\n                : {};\n        }\n        // If there's no User Timing mark to be compared with,\n        // the package will create one to be used for better comparison\n        if (!markNameToCompare) {\n            performance.mark(`${markName}-end`);\n        }\n        performance.measure(markName, markName, markNameToCompare || `${markName}-end`);\n        if (isNodeJSEnv) {\n            if (!!marksObserver[markName]) {\n                return marksObserver[markName];\n            }\n            return startTime\n                ? { duration: getTimeNow() - startTime, startTime, entryType: 'measure', name: markName }\n                : {};\n        }\n        const entry = performance.getEntriesByName(markName).pop();\n        return entry || {};\n    }\n    catch (e) {\n        // If previous mark was missing for some reason, this will throw.\n        // This could only happen if something in event loop crashed\n        // in an unexpected place earlier.\n        // Don't pile on with more errors.\n        return {};\n    }\n    finally {\n        // Clear marks immediately to avoid growing buffer.\n        clear(markName);\n        // Clear marks used for comparison in case of it's value was passed\n        // If the mark to compare is not passed, it should remove the one we create with `-end` suffix\n        clear(markNameToCompare || `${markName}-end`);\n    }\n};\n/**\n * Clear all marks and measures of performance event\n *\n * @returns void\n *\n */\nconst clearAll = () => {\n    marksMap = {};\n    marksObserver = {};\n    if (!isUserTimingAPISupported) {\n        return;\n    }\n    // Some versions of NodeJS doesn't support this method\n    if (!isNodeJSEnv) {\n        performance.clearMeasures();\n    }\n    performance.clearMarks();\n};\nexport { start, end, clear, clearAll, isUserTimingAPISupported, isPerformanceObservableSupported };\n","import * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, Component, ChangeDetectionStrategy, Inject, Optional, Input, NgModule } from '@angular/core';\nimport { start, end } from 'perf-marks/marks';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nconst NGX_SKELETON_LOADER_CONFIG = new InjectionToken('ngx-skeleton-loader.config');\n\nclass NgxSkeletonLoaderComponent {\n    constructor(config) {\n        const { appearance = 'line', animation = 'progress', theme = null, loadingText = 'Loading...', count = 1, ariaLabel = 'loading', } = config || {};\n        this.appearance = appearance;\n        this.animation = animation;\n        this.theme = theme;\n        this.loadingText = loadingText;\n        this.count = count;\n        this.items = [];\n        this.ariaLabel = ariaLabel;\n    }\n    ngOnInit() {\n        start('NgxSkeletonLoader:Rendered');\n        start('NgxSkeletonLoader:Loaded');\n        this.validateInputValues();\n    }\n    validateInputValues() {\n        // Checking if it's receiving a numeric value (string having ONLY numbers or if it's a number)\n        if (!/^\\d+$/.test(`${this.count}`)) {\n            // Shows error message only in Development\n            if (isDevMode()) {\n                console.error(`\\`NgxSkeletonLoaderComponent\\` need to receive 'count' a numeric value. Forcing default to \"1\".`);\n            }\n            this.count = 1;\n        }\n        this.items.length = this.count;\n        const allowedAnimations = ['progress', 'progress-dark', 'pulse', 'false'];\n        if (allowedAnimations.indexOf(String(this.animation)) === -1) {\n            // Shows error message only in Development\n            if (isDevMode()) {\n                console.error(`\\`NgxSkeletonLoaderComponent\\` need to receive 'animation' as: ${allowedAnimations.join(', ')}. Forcing default to \"progress\".`);\n            }\n            this.animation = 'progress';\n        }\n        if (['circle', 'line', ''].indexOf(String(this.appearance)) === -1) {\n            // Shows error message only in Development\n            if (isDevMode()) {\n                console.error(`\\`NgxSkeletonLoaderComponent\\` need to receive 'appearance' as: circle or line or empty string. Forcing default to \"''\".`);\n            }\n            this.appearance = '';\n        }\n    }\n    ngOnChanges(changes) {\n        // Avoiding multiple calls for the same input in case there's no changes in the fields\n        // Checking if the fields that require validation are available and if they were changed\n        // In case were not changed, we stop the function. Otherwise, `validateInputValues` will be called.\n        if (['count', 'animation', 'appearance'].find(key => changes[key] && (changes[key].isFirstChange() || changes[key].previousValue === changes[key].currentValue))) {\n            return;\n        }\n        this.validateInputValues();\n    }\n    ngAfterViewInit() {\n        end('NgxSkeletonLoader:Rendered');\n    }\n    ngOnDestroy() {\n        end('NgxSkeletonLoader:Loaded');\n    }\n}\n/** @nocollapse */ /** @nocollapse */ NgxSkeletonLoaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgxSkeletonLoaderComponent, deps: [{ token: NGX_SKELETON_LOADER_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Component });\n/** @nocollapse */ /** @nocollapse */ NgxSkeletonLoaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: NgxSkeletonLoaderComponent, selector: \"ngx-skeleton-loader\", inputs: { count: \"count\", loadingText: \"loadingText\", appearance: \"appearance\", animation: \"animation\", ariaLabel: \"ariaLabel\", theme: \"theme\" }, usesOnChanges: true, ngImport: i0, template: \"<span\\n  *ngFor=\\\"let item of items\\\"\\n  class=\\\"skeleton-loader\\\"\\n  [attr.aria-label]=\\\"ariaLabel\\\"\\n  aria-busy=\\\"true\\\"\\n  aria-valuemin=\\\"0\\\"\\n  aria-valuemax=\\\"100\\\"\\n  [attr.aria-valuetext]=\\\"loadingText\\\"\\n  role=\\\"progressbar\\\"\\n  tabindex=\\\"0\\\"\\n  [ngClass]=\\\"{\\n    circle: appearance === 'circle',\\n    progress: animation === 'progress',\\n    'progress-dark': animation === 'progress-dark',\\n    pulse: animation === 'pulse'\\n  }\\\"\\n  [ngStyle]=\\\"theme\\\"\\n>\\n</span>\\n\", styles: [\".skeleton-loader{box-sizing:border-box;overflow:hidden;position:relative;background:#eff1f6 no-repeat;border-radius:4px;width:100%;height:20px;display:inline-block;margin-bottom:10px;will-change:transform}.skeleton-loader:after,.skeleton-loader:before{box-sizing:border-box}.skeleton-loader.circle{width:40px;height:40px;margin:5px;border-radius:50%}.skeleton-loader.progress,.skeleton-loader.progress-dark{transform:translate(0)}.skeleton-loader.progress:after,.skeleton-loader.progress:before,.skeleton-loader.progress-dark:after,.skeleton-loader.progress-dark:before{box-sizing:border-box}.skeleton-loader.progress:before,.skeleton-loader.progress-dark:before{-webkit-animation:progress 2s ease-in-out infinite;animation:progress 2s ease-in-out infinite;background-size:200px 100%;position:absolute;z-index:1;top:0;left:0;width:200px;height:100%;content:\\\"\\\"}.skeleton-loader.progress:before{background-image:linear-gradient(90deg,rgba(255,255,255,0),rgba(255,255,255,.6),rgba(255,255,255,0))}.skeleton-loader.progress-dark:before{background-image:linear-gradient(90deg,transparent,rgba(0,0,0,.2),transparent)}.skeleton-loader.pulse{-webkit-animation:pulse 1.5s cubic-bezier(.4,0,.2,1) infinite;animation:pulse 1.5s cubic-bezier(.4,0,.2,1) infinite;-webkit-animation-delay:.5s;animation-delay:.5s}@media (prefers-reduced-motion: reduce){.skeleton-loader.pulse,.skeleton-loader.progress-dark,.skeleton-loader.progress{-webkit-animation:none;animation:none}.skeleton-loader.progress,.skeleton-loader.progress-dark{background-image:none}}@-webkit-keyframes progress{0%{transform:translate(-200px)}to{transform:translate(calc(200px + 100vw))}}@keyframes progress{0%{transform:translate(-200px)}to{transform:translate(calc(200px + 100vw))}}@-webkit-keyframes pulse{0%{opacity:1}50%{opacity:.4}to{opacity:1}}@keyframes pulse{0%{opacity:1}50%{opacity:.4}to{opacity:1}}\\n\"], directives: [{ type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i1.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgxSkeletonLoaderComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-skeleton-loader', changeDetection: ChangeDetectionStrategy.OnPush, template: \"<span\\n  *ngFor=\\\"let item of items\\\"\\n  class=\\\"skeleton-loader\\\"\\n  [attr.aria-label]=\\\"ariaLabel\\\"\\n  aria-busy=\\\"true\\\"\\n  aria-valuemin=\\\"0\\\"\\n  aria-valuemax=\\\"100\\\"\\n  [attr.aria-valuetext]=\\\"loadingText\\\"\\n  role=\\\"progressbar\\\"\\n  tabindex=\\\"0\\\"\\n  [ngClass]=\\\"{\\n    circle: appearance === 'circle',\\n    progress: animation === 'progress',\\n    'progress-dark': animation === 'progress-dark',\\n    pulse: animation === 'pulse'\\n  }\\\"\\n  [ngStyle]=\\\"theme\\\"\\n>\\n</span>\\n\", styles: [\".skeleton-loader{box-sizing:border-box;overflow:hidden;position:relative;background:#eff1f6 no-repeat;border-radius:4px;width:100%;height:20px;display:inline-block;margin-bottom:10px;will-change:transform}.skeleton-loader:after,.skeleton-loader:before{box-sizing:border-box}.skeleton-loader.circle{width:40px;height:40px;margin:5px;border-radius:50%}.skeleton-loader.progress,.skeleton-loader.progress-dark{transform:translate(0)}.skeleton-loader.progress:after,.skeleton-loader.progress:before,.skeleton-loader.progress-dark:after,.skeleton-loader.progress-dark:before{box-sizing:border-box}.skeleton-loader.progress:before,.skeleton-loader.progress-dark:before{-webkit-animation:progress 2s ease-in-out infinite;animation:progress 2s ease-in-out infinite;background-size:200px 100%;position:absolute;z-index:1;top:0;left:0;width:200px;height:100%;content:\\\"\\\"}.skeleton-loader.progress:before{background-image:linear-gradient(90deg,rgba(255,255,255,0),rgba(255,255,255,.6),rgba(255,255,255,0))}.skeleton-loader.progress-dark:before{background-image:linear-gradient(90deg,transparent,rgba(0,0,0,.2),transparent)}.skeleton-loader.pulse{-webkit-animation:pulse 1.5s cubic-bezier(.4,0,.2,1) infinite;animation:pulse 1.5s cubic-bezier(.4,0,.2,1) infinite;-webkit-animation-delay:.5s;animation-delay:.5s}@media (prefers-reduced-motion: reduce){.skeleton-loader.pulse,.skeleton-loader.progress-dark,.skeleton-loader.progress{-webkit-animation:none;animation:none}.skeleton-loader.progress,.skeleton-loader.progress-dark{background-image:none}}@-webkit-keyframes progress{0%{transform:translate(-200px)}to{transform:translate(calc(200px + 100vw))}}@keyframes progress{0%{transform:translate(-200px)}to{transform:translate(calc(200px + 100vw))}}@-webkit-keyframes pulse{0%{opacity:1}50%{opacity:.4}to{opacity:1}}@keyframes pulse{0%{opacity:1}50%{opacity:.4}to{opacity:1}}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [NGX_SKELETON_LOADER_CONFIG]\n                }, {\n                    type: Optional\n                }] }]; }, propDecorators: { count: [{\n                type: Input\n            }], loadingText: [{\n                type: Input\n            }], appearance: [{\n                type: Input\n            }], animation: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], theme: [{\n                type: Input\n            }] } });\n\nclass NgxSkeletonLoaderModule {\n    static forRoot(config) {\n        return {\n            ngModule: NgxSkeletonLoaderModule,\n            providers: [{ provide: NGX_SKELETON_LOADER_CONFIG, useValue: config }],\n        };\n    }\n}\n/** @nocollapse */ /** @nocollapse */ NgxSkeletonLoaderModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgxSkeletonLoaderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ /** @nocollapse */ NgxSkeletonLoaderModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgxSkeletonLoaderModule, declarations: [NgxSkeletonLoaderComponent], imports: [CommonModule], exports: [NgxSkeletonLoaderComponent] });\n/** @nocollapse */ /** @nocollapse */ NgxSkeletonLoaderModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgxSkeletonLoaderModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgxSkeletonLoaderModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [NgxSkeletonLoaderComponent],\n                    imports: [CommonModule],\n                    exports: [NgxSkeletonLoaderComponent],\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-skeleton-loader\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NGX_SKELETON_LOADER_CONFIG, NgxSkeletonLoaderComponent, NgxSkeletonLoaderModule };\n"],"x_google_ignoreList":[1,2,3,4,5]}