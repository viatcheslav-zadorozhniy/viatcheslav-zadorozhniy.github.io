{"version":3,"file":"70.3fd56d16f326b95d.js","mappings":"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","names":["i0","routes","path","component","RtcComponent","constructor","cdr","platformShield","this","pictureInPictureEnabled","nativeWindow","rtcActive","rtcSender","startRTC","localStream","_this","mediaDevices","getUserMedia","video","sendingConnection","RTCPeerConnection","receivingConnection","getTracks","forEach","track","addTrack","addEventListener","event","remoteVideo","nativeElement","srcObject","streams","handleIceCandidateEvents","createSendingOffer","localVideo","markForCheck","error","console","stopRTC","removeTrack","close","undefined","exitPictureInPicture","togglePictureInPicture","nativeDocument","pictureInPictureElement","requestPictureInPicture","candidate","addIceCandidate","RTCIceCandidate","sendingDescription","createOffer","offerToReceiveVideo","setLocalDescription","setRemoteDescription","answerDescription","createAnswer","selectors","RtcRoutingModule","RouterModule","RtcModule","CommonModule","MatButtonModule"],"sourceRoot":"webpack:///","sources":["./libs/demo/src/lib/rtc/rtc.component.html","./libs/demo/src/lib/rtc/rtc-routing.module.ts","./libs/demo/src/lib/rtc/rtc.component.ts","./libs/demo/src/lib/rtc/rtc.module.ts"],"sourcesContent":["<ng-container *ngIf=\"rtcSupported; else rtcUnsupported\">\n  <div class=\"d-flex flex-wrap gap-2 mb-3\">\n    <button\n      type=\"button\"\n      color=\"primary\"\n      mat-raised-button\n      class=\"\"\n      [disabled]=\"rtcActive\"\n      (click)=\"startRTC()\"\n    >Start RTC</button>\n\n    <button\n      type=\"button\"\n      color=\"primary\"\n      mat-raised-button\n      (click)=\"stopRTC()\"\n      [disabled]=\"!rtcActive\"\n    >Stop RTC</button>\n  </div>\n\n  <section class=\"mb-3\">\n    <h3>Local video</h3>\n    <video autoplay #localVideo class=\"max-inline-100\"></video>\n\n    <div class=\"mt-2\">\n      <button\n        *ngIf=\"pictureInPictureEnabled; else pictureInPictureUnsupported\"\n        type=\"button\"\n        mat-raised-button\n        [disabled]=\"!rtcActive\"\n        (click)=\"togglePictureInPicture()\"\n      >Toggle Picture-in-Picture</button>\n    </div>\n  </section>\n\n  <section>\n    <h3>Remote video</h3>\n    <video autoplay #remoteVideo class=\"max-inline-100\"></video>\n  </section>\n</ng-container>\n\n<ng-template #rtcUnsupported>\n  Your device does not support real-time communication in the Web.\n</ng-template>\n\n<ng-template #pictureInPictureUnsupported>\n  Your device does not support Picture-in-Picture API.\n</ng-template>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { RtcComponent } from './rtc.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RtcComponent,\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class RtcRoutingModule { }\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, ViewChild } from '@angular/core';\n\nimport { PlatformShieldService } from '@playground/shared';\n\n@Component({\n  selector: 'playground-rtc',\n  templateUrl: './rtc.component.html',\n  styleUrls: ['./rtc.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    class: 'full-size p-3 overflow-auto'\n  }\n})\nexport class RtcComponent {\n\n  @ViewChild('localVideo')\n  readonly localVideo!: ElementRef<HTMLVideoElement>;\n\n  @ViewChild('remoteVideo')\n  readonly remoteVideo!: ElementRef<HTMLVideoElement>;\n\n  readonly pictureInPictureEnabled = this.platformShield.pictureInPictureEnabled;\n  readonly rtcSupported = 'RTCPeerConnection' in this.platformShield.nativeWindow;\n\n  private rtcSender: RTCRtpSender | undefined;\n  private sendingConnection: RTCPeerConnection | undefined;\n\n  constructor(\n    private readonly cdr: ChangeDetectorRef,\n    private readonly platformShield: PlatformShieldService,\n  ) {}\n\n  get rtcActive(): boolean {\n    return !!this.rtcSender;\n  }\n\n  async startRTC(): Promise<void> {\n    try {\n      const localStream = await this.platformShield.mediaDevices.getUserMedia({\n        video: true,\n      });\n\n      const sendingConnection = new RTCPeerConnection();\n      const receivingConnection = new RTCPeerConnection();\n\n      localStream.getTracks().forEach(track => {\n        this.rtcSender = sendingConnection.addTrack(track, localStream);\n      });\n\n      receivingConnection.addEventListener('track', event => {\n        this.remoteVideo.nativeElement.srcObject = event.streams[0];\n      });\n\n      this.handleIceCandidateEvents(sendingConnection, receivingConnection);\n      this.createSendingOffer(sendingConnection, receivingConnection);\n\n      this.sendingConnection = sendingConnection;\n      this.localVideo.nativeElement.srcObject = localStream;\n      this.cdr.markForCheck();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  stopRTC(): void {\n    if (!this.rtcSender || !this.sendingConnection) {\n      return;\n    }\n\n    this.sendingConnection.removeTrack(this.rtcSender);\n    this.sendingConnection.close();\n    this.sendingConnection = undefined;\n\n    this.remoteVideo.nativeElement.srcObject = null;\n    this.localVideo.nativeElement.srcObject = null;\n\n    this.exitPictureInPicture();\n    this.rtcSender = undefined;\n  }\n\n  togglePictureInPicture(): void {\n    const nativeDocument = this.platformShield.nativeDocument;\n\n    if (nativeDocument.pictureInPictureElement) {\n      nativeDocument.exitPictureInPicture();\n    } else if (this.pictureInPictureEnabled) {\n      this.localVideo.nativeElement.requestPictureInPicture();\n    }\n  }\n\n  private exitPictureInPicture(): void {\n    if (this.platformShield.nativeDocument.pictureInPictureElement) {\n      this.platformShield.nativeDocument.exitPictureInPicture();\n    }\n  }\n\n  private handleIceCandidateEvents(\n    sendingConnection: RTCPeerConnection,\n    receivingConnection: RTCPeerConnection,\n  ): void {\n    sendingConnection.addEventListener('icecandidate', event => {\n      if (event.candidate) {\n        receivingConnection.addIceCandidate(new RTCIceCandidate(event.candidate));\n      }\n    });\n\n    receivingConnection.addEventListener('icecandidate', event => {\n      if (event.candidate) {\n        sendingConnection.addIceCandidate(new RTCIceCandidate(event.candidate));\n      }\n    });\n  }\n\n  private async createSendingOffer(\n    sendingConnection: RTCPeerConnection,\n    receivingConnection: RTCPeerConnection,\n  ): Promise<void> {\n    try {\n      const sendingDescription = await sendingConnection.createOffer({ offerToReceiveVideo: true });\n      sendingConnection.setLocalDescription(sendingDescription);\n      receivingConnection.setRemoteDescription(sendingDescription);\n\n      const answerDescription = await receivingConnection.createAnswer({ offerToReceiveVideo: 1 });\n      sendingConnection.setRemoteDescription(answerDescription);\n      receivingConnection.setLocalDescription(answerDescription);\n    } catch (error) {\n      console.error('createOffer()/createAnswer() failed ' + error);\n    }\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\n\nimport { RtcRoutingModule } from './rtc-routing.module';\nimport { RtcComponent } from './rtc.component';\n\n@NgModule({\n  declarations: [RtcComponent],\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    RtcRoutingModule,\n  ],\n})\nexport class RtcModule {}\n"],"x_google_ignoreList":[]}