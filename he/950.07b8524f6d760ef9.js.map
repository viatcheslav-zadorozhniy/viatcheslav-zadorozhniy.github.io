{"version":3,"file":"950.07b8524f6d760ef9.js","mappings":"qQAKEA,oBAIEA,yDAASA,uBAAc,GAExBA,wBAAYA,iDAEbA,oBAIEA,yDAASA,iCAAwB,GAElCA,qCAAyBA,SCd5B,MAAMC,EAAiB,CACrB,CACEC,KAAM,GACNC,UCKJ,MAAM,MAAOC,EAaXC,YACmBC,EACAC,GADAC,WACAA,sBAVVA,6BAA0BA,KAAKD,eAAeE,uBAWnD,CAPQC,2BACV,OAAOF,KAAKG,cAAcC,aAC3B,CAOKC,eAAY,qCAChB,IACE,MAAMC,QAAeC,EAAKR,eAAeS,aAAaC,gBAAgB,CACpEC,OAAO,EACPC,OAAO,IAGTL,EAAOM,iBAAiB,WAAY,KAClCL,EAAKM,aAAL,EACC,CAAEC,MAAM,IAEXP,EAAKL,qBAAqBa,UAAYT,EACtCC,EAAKS,aAAeV,EAEpBC,EAAKU,0CACLV,EAAKT,IAAIoB,cAGV,CAFA,MAAQC,GACPC,QAAQD,MAAMA,EACf,CAlBe,IAmBjB,CAEDN,eACOb,KAAKgB,eAIVhB,KAAKgB,aAAaK,YAAYC,QAAQC,IACpCA,EAAMC,MAAN,GAGFxB,KAAKgB,kBAAeS,EACpBzB,KAAKE,qBAAqBa,UAAY,KAEtCf,KAAK0B,uBACL1B,KAAKF,IAAIoB,eACV,CAEDS,yBACE,MAAMC,EAAiB5B,KAAKD,eAAe6B,eAEvCA,EAAeC,wBACjBD,EAAeF,uBACN1B,KAAKC,yBACdD,KAAKE,qBAAqB4B,yBAE7B,CAEOJ,uBACF1B,KAAKD,eAAe6B,eAAeC,yBACrC7B,KAAKD,eAAe6B,eAAeF,sBAEtC,CAEOT,0CAAuC,YACxCjB,KAAKC,yBAIVD,KAAKE,qBAAqBU,iBAAiB,kBAA3C,OAA6D,YAC3D,UACQmB,EAAK7B,qBAAqB4B,yBAGjC,CAFA,MACCV,QAAQY,KAAK,kDACd,CACF,GAAE,CAAElB,MAAM,GACZ,+CAnFUlB,GAAoBJ,kDAApBI,EAAoBqC,kgBFbjCzC,iBACEA,qBACFA,QAEAA,iBACEA,0BAQAA,0BAQAA,oBAIEA,gCAAS0C,eAAa,GACvB1C,wBAAYA,iBAhBVA,mEAQAA,iEAMDA,2LEXSI,CAAb,ODGO,IAAMuC,EAAb,MAAM,MAAOA,kDAAwB,0BAAxBA,gCAHDC,cAAsB3C,GACtB2C,QAECD,CAAb,KEDaE,EAAb,MAAM,MAAOA,kDAAiB,0BAAjBA,gCALTC,KACAC,KACAJ,KAGSE,CAAb","names":["i0","routes","path","component","ScreenShareComponent","constructor","cdr","platformShield","this","pictureInPictureEnabled","screenPreviewElement","screenPreview","nativeElement","startCapture","stream","_this","mediaDevices","getDisplayMedia","audio","video","addEventListener","stopCapture","once","srcObject","activeStream","requestPictureInPictureProgrammatically","markForCheck","error","console","getTracks","forEach","track","stop","undefined","exitPictureInPicture","togglePictureInPicture","nativeDocument","pictureInPictureElement","requestPictureInPicture","_this2","warn","selectors","ctx","ScreenShareRoutingModule","RouterModule","ScreenShareModule","CommonModule","MatButtonModule"],"sourceRoot":"webpack:///","sources":["./libs/demo/src/lib/screen-share/screen-share.component.html","./libs/demo/src/lib/screen-share/screen-share-routing.module.ts","./libs/demo/src/lib/screen-share/screen-share.component.ts","./libs/demo/src/lib/screen-share/screen-share.module.ts"],"sourcesContent":["<div class=\"mb-2\">\n  <video #screenPreview autoplay></video>\n</div>\n\n<div class=\"d-flex gap-2 flex-wrap\">\n  <button\n    type=\"button\"\n    color=\"primary\"\n    mat-raised-button\n    (click)=\"startCapture()\"\n    *ngIf=\"!activeStream || !pictureInPictureEnabled\"\n  >Share screen</button>\n\n  <button\n    type=\"button\"\n    color=\"primary\"\n    mat-raised-button\n    (click)=\"togglePictureInPicture()\"\n    *ngIf=\"activeStream && pictureInPictureEnabled\"\n  >Toggle Picture-in-Picture</button>\n\n  <button\n    type=\"button\"\n    mat-raised-button\n    [disabled]=\"!activeStream\"\n    (click)=\"stopCapture()\"\n  >Stop sharing</button>\n</div>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { ScreenShareComponent } from './screen-share.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ScreenShareComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ScreenShareRoutingModule { }\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, ViewChild } from '@angular/core';\n\nimport { PlatformShieldService } from '@playground/shared';\n\n@Component({\n  selector: 'playground-screen-share',\n  templateUrl: './screen-share.component.html',\n  styleUrls: ['./screen-share.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    class: 'full-size p-3'\n  }\n})\nexport class ScreenShareComponent {\n\n  @ViewChild('screenPreview', { static: true })\n  readonly screenPreview!: ElementRef<HTMLVideoElement>;\n\n  readonly pictureInPictureEnabled = this.platformShield.pictureInPictureEnabled;\n\n  activeStream: MediaStream | undefined;\n\n  private get screenPreviewElement(): HTMLVideoElement {\n    return this.screenPreview.nativeElement;\n  }\n\n  constructor(\n    private readonly cdr: ChangeDetectorRef,\n    private readonly platformShield: PlatformShieldService,\n  ) {}\n\n  async startCapture(): Promise<void> {\n    try {\n      const stream = await this.platformShield.mediaDevices.getDisplayMedia({\n        audio: false,\n        video: true,\n      });\n\n      stream.addEventListener('inactive', () => {\n        this.stopCapture();\n      }, { once: true });\n\n      this.screenPreviewElement.srcObject = stream;\n      this.activeStream = stream;\n\n      this.requestPictureInPictureProgrammatically();\n      this.cdr.markForCheck();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  stopCapture(): void {\n    if (!this.activeStream) {\n      return;\n    }\n\n    this.activeStream.getTracks().forEach(track => {\n      track.stop();\n    });\n\n    this.activeStream = undefined;\n    this.screenPreviewElement.srcObject = null;\n\n    this.exitPictureInPicture();\n    this.cdr.markForCheck();\n  }\n\n  togglePictureInPicture(): void {\n    const nativeDocument = this.platformShield.nativeDocument;\n\n    if (nativeDocument.pictureInPictureElement) {\n      nativeDocument.exitPictureInPicture();\n    } else if (this.pictureInPictureEnabled) {\n      this.screenPreviewElement.requestPictureInPicture();\n    }\n  }\n\n  private exitPictureInPicture(): void {\n    if (this.platformShield.nativeDocument.pictureInPictureElement) {\n      this.platformShield.nativeDocument.exitPictureInPicture();\n    }\n  }\n\n  private requestPictureInPictureProgrammatically(): void {\n    if (!this.pictureInPictureEnabled) {\n      return;\n    }\n\n    this.screenPreviewElement.addEventListener('loadedmetadata', async () => {\n      try {\n        await this.screenPreviewElement.requestPictureInPicture();\n      } catch {\n        console.warn('Picture-in-picture API requires a user gesture.');\n      }\n    }, { once: true });\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\n\nimport { ScreenShareRoutingModule } from './screen-share-routing.module';\nimport { ScreenShareComponent } from './screen-share.component';\n\n@NgModule({\n  declarations: [ScreenShareComponent],\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    ScreenShareRoutingModule,\n  ],\n})\nexport class ScreenShareModule {}\n"],"x_google_ignoreList":[]}