{"version":3,"file":"491.27e6cb8720bd89e5.js","mappings":"8MAiBA,MAAMA,GAAkBC,QAAgC,CAAEC,SAAS,QAM7DC,QAAN,MAAMA,EACFC,YAAYC,EAAWC,GACnBC,KAAKF,UAAYA,EACjBE,KAAKD,QAAUA,EACfC,KAAKC,mBAAqB,IAAIC,GACjC,CACDC,QAAQC,GACJ,IAAKJ,KAAKF,UAAUO,UAChB,OAAOC,IAEX,MAAMC,KAAUC,MAAcJ,GACxBK,EAAOT,KAAKC,mBAAmBS,IAAIH,GACzC,GAAIE,EACA,OAAOA,EAAKE,QAEhB,MAAMC,EAAS,IAAIC,IACbC,EAAW,4BACXC,EAAaC,IAIa,kCAAxBA,EAAMC,eACLV,EAAQW,UAAUC,SAASL,GAIC,gCAAxBE,EAAMC,eACXV,EAAQW,UAAUC,SAASL,KAC3BP,EAAQW,UAAUE,OAAON,GACzBd,KAAKD,QAAQsB,IAAI,IAAMT,EAAOU,KAAK,CAAEC,OAAQP,EAAMO,OAAQC,cAAc,OANzEjB,EAAQW,UAAUO,IAAIX,GACtBd,KAAKD,QAAQsB,IAAI,IAAMT,EAAOU,KAAK,CAAEC,OAAQP,EAAMO,OAAQC,cAAc,KAKzE,EAGR,YAAKzB,QAAQ2B,kBAAkB,KAC3BnB,EAAQoB,iBAAiB,iBAAkBZ,EAAUtB,GACrDc,EAAQW,UAAUO,IAAI,oCAAtB,GAEJzB,KAAKC,mBAAmB2B,IAAIrB,EAAS,CACjCI,QAASC,EACTiB,SAAU,KACNtB,EAAQuB,oBAAoB,iBAAkBf,EAAUtB,EAAxD,IAGDmB,CACV,CACDmB,eAAe3B,GACX,MAAMG,KAAUC,MAAcJ,GACxBK,EAAOT,KAAKC,mBAAmBS,IAAIH,GACrCE,IACAA,EAAKoB,WACLpB,EAAKE,QAAQqB,WACbzB,EAAQW,UAAUE,OAAO,qCACzBb,EAAQW,UAAUE,OAAO,6BACzBpB,KAAKC,mBAAmBgC,OAAO1B,GAEtC,CACD2B,cACIlC,KAAKC,mBAAmBkC,QAAQ,CAACC,EAAO7B,IAAYP,KAAK+B,eAAexB,GAC3E,EAELX,SAAgByC,UAAhB,0BAA4GzC,GAAV0C,MAA2CC,MAA3CD,MAAmEA,OAArK,EACA1C,EAAgB4C,WADkFF,MAClG,OAAgH1C,EAAhH6C,QAAgH7C,EAAhH,qBAA6I,SA5DvIA,MAiZA8C,QAAN,MAAMA,GAENA,SAAgBL,UAAhB,0BAA4GK,EAA5G,EACAA,EAAgBC,UAzVkFL,MAyVlG,MAA6GI,IAC7GA,EAAgBE,UA1VkFN,MA0VlG,IAJMI,6BChYN,MAAMG,EAA2B,IAAIC,MAAe,4BAU9CC,EAA0B,CAC5B,SACA,WACA,OACA,SACA,QACA,QACA,QACA,QACA,UAEJ,IAAIC,EAAe,EAGnB,MAAMC,GAAgBC,QAAgB,MAClCrD,YAAYsD,EAA2BC,EAAaC,EAMpDC,GACItD,KAAKmD,0BAA4BA,EACjCnD,KAAKoD,YAAcA,EACnBpD,KAAKqD,iBAAmBA,EACxBrD,KAAKsD,UAAYA,EAMjBtD,KAAKuD,aAAe,IAAI1C,GAC3B,QAGC2C,QAAN,MAAMA,UAAiBP,EACnBpD,YAAY4D,EAAa3D,EAAWwD,EAAWF,EAAaC,EAAkBF,EAA2BO,EAAoBC,EAAkBC,EAG/IC,GACIC,MAAMX,EAA2BC,EAAaC,EAAkBC,GAChEtD,KAAKyD,YAAcA,EACnBzD,KAAKF,UAAYA,EACjBE,KAAK2D,iBAAmBA,EACxB3D,KAAK6D,WAAaA,EAClB7D,KAAK+D,KAAQ,aAAYf,IAKzBhD,KAAKgE,SAAU,EAKfhE,KAAKuD,aAAe,IAAI1C,IAKxBb,KAAKiE,YAAc,YAKnBjE,KAAKkE,YAAa,EAClBlE,KAAKmE,WAAY,EACjBnE,KAAKoE,MAAQ,OACbpE,KAAKqE,WAAY,EACjBrE,KAAKsE,sBAAwB,CACzB,OACA,WACA,iBACA,QACA,OACA,QACFC,OAAOC,MAAKC,QAAyBC,IAAIF,IAC3CxE,KAAK2E,kBAAqB3D,IACtB,MAAM4D,EAAK5D,EAAMO,QAOZqD,EAAGC,OAA+B,IAAtBD,EAAGE,gBAA4C,IAApBF,EAAGG,eAK3CH,EAAGI,kBAAkB,EAAG,GACxBJ,EAAGI,kBAAkB,EAAG,GAAxB,EAGR,MAAMzE,EAAUP,KAAKyD,YAAYwB,cAC3BC,EAAW3E,EAAQ2E,SAASC,cAGlCnF,KAAKoF,oBAAsB1B,GAAsBnD,EACjDP,KAAKqF,qBAAuBrF,KAAK6E,MAEjC7E,KAAKsF,GAAKtF,KAAKsF,GAIXxF,EAAUyF,KACV3B,EAAOlC,kBAAkB,KACrB+B,EAAYwB,cAActD,iBAAiB,QAAS3B,KAAK2E,kBAAzD,GAGR3E,KAAKwF,WAAaxF,KAAKF,UAAUO,UACjCL,KAAKyF,gBAA+B,WAAbP,EACvBlF,KAAK0F,YAA2B,aAAbR,EACnBlF,KAAK2F,iBAAmB9B,EACpB7D,KAAKyF,kBACLzF,KAAKiE,YAAc1D,EAAQqF,SACrB,6BACA,oBAEb,CAKGC,eACA,OAAI7F,KAAKsD,WAAyC,OAA5BtD,KAAKsD,UAAUuC,SAC1B7F,KAAKsD,UAAUuC,SAEnB7F,KAAKmE,SACf,CACG0B,aAAShB,GACT7E,KAAKmE,aAAY2B,MAAsBjB,GAGnC7E,KAAKgE,UACLhE,KAAKgE,SAAU,EACfhE,KAAKuD,aAAajC,OAEzB,CAKGgE,SACA,OAAOtF,KAAK+F,GACf,CACGT,OAAGT,GACH7E,KAAK+F,IAAMlB,GAAS7E,KAAK+D,IAC5B,CAKGiC,eACA,OAAOhG,KAAKiG,WAAajG,KAAKsD,WAAW4C,SAASC,aAAaC,iBAAwB,CAC1F,CACGJ,aAASnB,GACT7E,KAAKiG,aAAYH,MAAsBjB,EAC1C,CAEGwB,WACA,OAAOrG,KAAKoE,KACf,CACGiC,SAAKxB,GACL7E,KAAKoE,MAAQS,GAAS,OACtB7E,KAAKsG,iBAIAtG,KAAK0F,gBAAejB,QAAyBC,IAAI1E,KAAKoE,SACvDpE,KAAKyD,YAAYwB,cAAcoB,KAAOrG,KAAKoE,MAElD,CAKGS,YACA,OAAO7E,KAAKoF,oBAAoBP,KACnC,CACGA,UAAMA,GACFA,IAAU7E,KAAK6E,QACf7E,KAAKoF,oBAAoBP,MAAQA,EACjC7E,KAAKuD,aAAajC,OAEzB,CAEGiF,eACA,OAAOvG,KAAKqE,SACf,CACGkC,aAAS1B,GACT7E,KAAKqE,aAAYyB,MAAsBjB,EAC1C,CACD2B,kBACQxG,KAAKF,UAAUO,WACfL,KAAK2D,iBAAiBxD,QAAQH,KAAKyD,YAAYwB,eAAewB,UAAUzF,IACpEhB,KAAKkE,WAAalD,EAAMQ,aACxBxB,KAAKuD,aAAajC,MAAlB,EAGX,CACDoF,cACI1G,KAAKuD,aAAajC,MACrB,CACDY,cACIlC,KAAKuD,aAAavB,WACdhC,KAAKF,UAAUO,WACfL,KAAK2D,iBAAiB5B,eAAe/B,KAAKyD,YAAYwB,eAEtDjF,KAAKF,UAAUyF,KACfvF,KAAKyD,YAAYwB,cAAcnD,oBAAoB,QAAS9B,KAAK2E,kBAExE,CACDgC,YACQ3G,KAAKsD,WAILtD,KAAK4G,mBAKT5G,KAAK6G,yBAGL7G,KAAK8G,wBACR,CAEDC,MAAMC,GACFhH,KAAKyD,YAAYwB,cAAc8B,MAAMC,EACxC,CAEDC,cAAcC,GACNA,IAAclH,KAAKgE,UACnBhE,KAAKgE,QAAUkD,EACflH,KAAKuD,aAAajC,OAEzB,CACD6F,WAQC,CAEDL,yBAKI,MAAMM,EAAYpH,KAAK6D,WACjBwD,EAAcD,GAAsC,WAAzBA,EAAUE,aAA4BF,EAAUG,cAC3E,KACAvH,KAAKqH,YACX,GAAIA,IAAgBrH,KAAKwH,qBAAsB,CAC3C,MAAMjH,EAAUP,KAAKyD,YAAYwB,cACjCjF,KAAKwH,qBAAuBH,EAC5BA,EACM9G,EAAQkH,aAAa,cAAeJ,GACpC9G,EAAQmH,gBAAgB,cACjC,CACJ,CAEDb,yBACI,MAAMc,EAAW3H,KAAKyD,YAAYwB,cAAcJ,MAC5C7E,KAAKqF,uBAAyBsC,IAC9B3H,KAAKqF,qBAAuBsC,EAC5B3H,KAAKuD,aAAajC,OAEzB,CAEDgF,gBACQvD,EAAwB6E,QAAQ5H,KAAKoE,MAI5C,CAEDyD,gBACI,OAAO7H,KAAKsE,sBAAsBsD,QAAQ5H,KAAKoE,QAAS,CAC3D,CAED0D,cAEI,IAAIC,EAAW/H,KAAKyD,YAAYwB,cAAc8C,SAC9C,OAAOA,GAAYA,EAASC,QAC/B,CAKGC,YACA,QAASjI,KAAK6H,iBACT7H,KAAKyD,YAAYwB,cAAcJ,OAC/B7E,KAAK8H,eACL9H,KAAKkE,WACb,CAKGgE,uBACA,GAAIlI,KAAKyF,gBAAiB,CAItB,MAAM0C,EAAgBnI,KAAKyD,YAAYwB,cACjCmD,EAAcD,EAAcnB,QAAQ,GAG1C,OAAQhH,KAAKgE,SACTmE,EAAcvC,WACb5F,KAAKiI,UACHE,EAAcE,eAAgB,GAAMD,GAAeA,EAAYE,MACzE,CAEG,OAAOtI,KAAKgE,UAAYhE,KAAKiI,KAEpC,CAKDM,kBAAkBC,GACVA,EAAIC,OACJzI,KAAKyD,YAAYwB,cAAcwC,aAAa,mBAAoBe,EAAIE,KAAK,MAGzE1I,KAAKyD,YAAYwB,cAAcyC,gBAAgB,mBAEtD,CAKDiB,mBAIS3I,KAAKgE,SACNhE,KAAK+G,OAEZ,CAED6B,kBACI,MAAMrI,EAAUP,KAAKyD,YAAYwB,cACjC,OAAOjF,KAAKyF,kBAAoBlF,EAAQqF,UAAYrF,EAAQsI,KAAO,EACtE,EAELrF,SAASnB,UAAT,0BAAqGmB,GAAVlB,MAAoCA,OAApCA,MAA8DC,MAA9DD,MAAsFwG,KAAjL,IAA2FxG,MAA2IwG,IAAtO,GAA2FxG,MAAiLwG,KAA5Q,GAA2FxG,MAAmOyG,MAAnOzG,MAAoQO,EAA/V,IAA2FP,MAAqU0G,GAArU1G,MAAoWA,OAApWA,MAA0X2G,KAArd,KACAzF,EAAS0F,UADkF5G,MAC3F,MAAyFkB,EAAzF2F,mRAD2F7G,MAC3F,0BAAyF8G,iBAAc,EAAvG,EAD2F9G,CAC3F,yBAAyF8G,iBAAc,EAAvG,EAD2F9G,CAC3F,0BAAyF8G,YAAzF,SAD2F9G,MAC3F,sBAD2FA,CAC3F,uBAD2FA,MAC3F,UAD2FA,CAC3F,iCAD2FA,CAC3F,oBAD2FA,CAC3F,gDAD2FA,CAC3F,qDAD2FA,CAC3F,4BAD2FA,MAC3F,+BAD2FA,CAC3F,oUAD2FA,MACw+B,CAAC,CAAE+G,QAASC,KAAqBC,YAAa/F,KADthClB,eA9TrFkB,MAoZAgG,QAAN,MAAMA,GAENA,SAAenH,UAAf,0BAA2GmH,EAA3G,EACAA,EAAe7G,UAzF4EL,MAyF3F,MAA4GkH,IAK5GA,EAAe5G,UA9F4EN,MA8F3F,WAAuI,CAACmH,MAAxIC,SAAsKhH,EAAiBiH,KAAoBC,KAAiBlH,EAGpNiH,QAXFH,MC/dOK,EAAb,MAAM,MAAOA,kDAAQ,0BAARA,gCAJDC,QAICD,CAAb,sDCVAvH,mBAAsB,UACpBA,WAAkDA,QAClDA,0BAAiEA,QACjEA,0BAA8DA,QAC9DA,0BAAoDA,gCAFaA,0CACHA,yCACVA,uCCM/C,IAAMyH,EAAb,MAAM,MAAOA,kDAAiB,0BAAjBA,EAAiBZ,gHDTaa,+DAAAA,GACRA,gEAAY,GACbA,sEAAW,GACdA,+DAAO,8DAJtC1H,gCAAUA,8DCUGyH,CAAb,KCLA,MAAME,EAAiB,CACrB,CACEC,KAAM,GACNC,UCMJ,MAAM,MAAOC,EAeXvK,YACmBwK,eAdVrK,SAAM,IAAIsK,KAEVtK,UAAa,CACpBuK,UAAW,cACXC,SAAU,cACVC,OAAQ,OACRC,MAAO,qCAKA1K,qBAAkBgK,oIAIvB,CAEJY,WACE5K,KAAKqK,KAAKQ,OAAO,CACfC,KAAM,cACNC,QAASf,sGAA+DA,EAE3E,+CAxBUI,GAAa9H,sCAAb8H,EAAajB,oICZ0Da,sFAAAA,GAO7EA,uKAAAA,GAUYA,4EAAAA,GAKqBA,iFAAAA,GAGSA,kDAAAA,GAIAA,gCAAAA,GAIQA,wDAAAA,GAQxBA,mDAAAA,GAKyCA,2FAAAA,2CAApBA,mGAAmE,GAKzCA,oBAAAA,4UAnDhF1H,yBAAwGA,QACxGA,aAAGA,SAAqBA,QAIxBA,iBAOE,QAKFA,oBAA0CA,QAE1CA,eAAK,QAGHA,YAAoDA,QACpDA,iBAAiB,WAEbA,sBAA+CA,QAAeA,2BAChEA,QAEAA,iBACEA,sBAA+CA,QAAeA,2BAChEA,QAEAA,iBACEA,sBAA2DA,QAAeA,+BAC5EA,YAMJA,mBAAmB,SACjBA,aAA4CA,QAE5CA,gBAAK,uBAALA,CAAK,gBAGDA,aAAuIA,QACvIA,wBACFA,UAGFA,mCAAoFA,UAItFA,oCAEAA,mBAAkB,WACwBA,iBAAIA,iBAzD3CA,kCAwBiEA,yDAIAA,yDAIYA,4CAa6DA,8BAAY8G,kBAAZ9G,UASvHA,qKD3CT8H,CAAb,ODEO,IAAMa,EAAb,MAAM,MAAOA,kDAAiB,0BAAjBA,gCAHDC,cAAsBjB,GACtBiB,QAECD,CAAb,KGMaE,EAAb,MAAM,MAAOA,kDAAU,0BAAVA,gCARTtB,EACAC,KACAsB,KACAH,EACAzB,EACAG,QAGSwB,CAAb","sources":["./node_modules/@angular/cdk/fesm2020/text-field.mjs","./node_modules/@angular/material/fesm2020/input.mjs","./libs/ui/src/lib/ui.module.ts","./libs/ui/src/lib/user-card/user-card.component.html","./libs/ui/src/lib/user-card/user-card.component.ts","./apps/i18n/src/app/home/home-routing.module.ts","./apps/i18n/src/app/home/home.component.ts","./apps/i18n/src/app/home/home.component.html","./apps/i18n/src/app/home/home.module.ts"],"sourcesContent":["import * as i1 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Output, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options to pass to the animationstart listener. */\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    constructor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject;\n        }\n        const result = new Subject();\n        const cssClass = 'cdk-text-field-autofilled';\n        const listener = ((event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: true }));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: false }));\n            }\n        });\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        });\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            },\n        });\n        return result;\n    }\n    stopMonitoring(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    ngOnDestroy() {\n        this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n}\nAutofillMonitor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: AutofillMonitor, deps: [{ token: i1.Platform }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nAutofillMonitor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: AutofillMonitor, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: AutofillMonitor, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }, { type: i0.NgZone }]; } });\n/** A directive that can be used to monitor the autofill state of an input. */\nclass CdkAutofill {\n    constructor(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /** Emits when the autofill state of the element changes. */\n        this.cdkAutofill = new EventEmitter();\n    }\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe(event => this.cdkAutofill.emit(event));\n    }\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n}\nCdkAutofill.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkAutofill, deps: [{ token: i0.ElementRef }, { token: AutofillMonitor }], target: i0.ɵɵFactoryTarget.Directive });\nCdkAutofill.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkAutofill, selector: \"[cdkAutofill]\", outputs: { cdkAutofill: \"cdkAutofill\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkAutofill, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkAutofill]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: AutofillMonitor }]; }, propDecorators: { cdkAutofill: [{\n                type: Output\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Directive to automatically resize a textarea to fit its content. */\nclass CdkTextareaAutosize {\n    constructor(_elementRef, _platform, _ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._isViewInited = false;\n        /** Handles `focus` and `blur` events. */\n        this._handleFocusEvent = (event) => {\n            this._hasFocus = event.type === 'focus';\n        };\n        this._document = document;\n        this._textareaElement = this._elementRef.nativeElement;\n    }\n    /** Minimum amount of rows in the textarea. */\n    get minRows() {\n        return this._minRows;\n    }\n    set minRows(value) {\n        this._minRows = coerceNumberProperty(value);\n        this._setMinHeight();\n    }\n    /** Maximum amount of rows in the textarea. */\n    get maxRows() {\n        return this._maxRows;\n    }\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value);\n        this._setMaxHeight();\n    }\n    /** Whether autosizing is enabled or not */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        value = coerceBooleanProperty(value);\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    get placeholder() {\n        return this._textareaElement.placeholder;\n    }\n    set placeholder(value) {\n        this._cachedPlaceholderHeight = undefined;\n        if (value) {\n            this._textareaElement.setAttribute('placeholder', value);\n        }\n        else {\n            this._textareaElement.removeAttribute('placeholder');\n        }\n        this._cacheTextareaPlaceholderHeight();\n    }\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    _setMinHeight() {\n        const minHeight = this.minRows && this._cachedLineHeight ? `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    _setMaxHeight() {\n        const maxHeight = this.maxRows && this._cachedLineHeight ? `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe(() => this.resizeToFitContent(true));\n                this._textareaElement.addEventListener('focus', this._handleFocusEvent);\n                this._textareaElement.addEventListener('blur', this._handleFocusEvent);\n            });\n            this._isViewInited = true;\n            this.resizeToFitContent(true);\n        }\n    }\n    ngOnDestroy() {\n        this._textareaElement.removeEventListener('focus', this._handleFocusEvent);\n        this._textareaElement.removeEventListener('blur', this._handleFocusEvent);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        let textareaClone = this._textareaElement.cloneNode(false);\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        this._textareaElement.parentNode.appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        textareaClone.remove();\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    _measureScrollHeight() {\n        const element = this._textareaElement;\n        const previousMargin = element.style.marginBottom || '';\n        const isFirefox = this._platform.FIREFOX;\n        const needsMarginFiller = isFirefox && this._hasFocus;\n        const measuringClass = isFirefox\n            ? 'cdk-textarea-autosize-measuring-firefox'\n            : 'cdk-textarea-autosize-measuring';\n        // In some cases the page might move around while we're measuring the `textarea` on Firefox. We\n        // work around it by assigning a temporary margin with the same height as the `textarea` so that\n        // it occupies the same amount of space. See #23233.\n        if (needsMarginFiller) {\n            element.style.marginBottom = `${element.clientHeight}px`;\n        }\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        element.classList.add(measuringClass);\n        // The measuring class includes a 2px padding to workaround an issue with Chrome,\n        // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        const scrollHeight = element.scrollHeight - 4;\n        element.classList.remove(measuringClass);\n        if (needsMarginFiller) {\n            element.style.marginBottom = previousMargin;\n        }\n        return scrollHeight;\n    }\n    _cacheTextareaPlaceholderHeight() {\n        if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n            return;\n        }\n        if (!this.placeholder) {\n            this._cachedPlaceholderHeight = 0;\n            return;\n        }\n        const value = this._textareaElement.value;\n        this._textareaElement.value = this._textareaElement.placeholder;\n        this._cachedPlaceholderHeight = this._measureScrollHeight();\n        this._textareaElement.value = value;\n    }\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        this._cacheTextareaPlaceholderHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        const textarea = this._elementRef.nativeElement;\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        const scrollHeight = this._measureScrollHeight();\n        const height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0);\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n            }\n            else {\n                setTimeout(() => this._scrollToCaretPosition(textarea));\n            }\n        });\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    }\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && this._hasFocus) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    }\n}\nCdkTextareaAutosize.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkTextareaAutosize, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkTextareaAutosize.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkTextareaAutosize, selector: \"textarea[cdkTextareaAutosize]\", inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\"], placeholder: \"placeholder\" }, host: { attributes: { \"rows\": \"1\" }, listeners: { \"input\": \"_noopInputHandler()\" }, classAttribute: \"cdk-textarea-autosize\" }, exportAs: [\"cdkTextareaAutosize\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkTextareaAutosize, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'textarea[cdkTextareaAutosize]',\n                    exportAs: 'cdkTextareaAutosize',\n                    host: {\n                        'class': 'cdk-textarea-autosize',\n                        // Textarea elements that have the directive applied should have a single row by default.\n                        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                        'rows': '1',\n                        '(input)': '_noopInputHandler()',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { minRows: [{\n                type: Input,\n                args: ['cdkAutosizeMinRows']\n            }], maxRows: [{\n                type: Input,\n                args: ['cdkAutosizeMaxRows']\n            }], enabled: [{\n                type: Input,\n                args: ['cdkTextareaAutosize']\n            }], placeholder: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass TextFieldModule {\n}\nTextFieldModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: TextFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTextFieldModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: TextFieldModule, declarations: [CdkAutofill, CdkTextareaAutosize], exports: [CdkAutofill, CdkTextareaAutosize] });\nTextFieldModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: TextFieldModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: TextFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [CdkAutofill, CdkTextareaAutosize],\n                    exports: [CdkAutofill, CdkTextareaAutosize],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { getSupportedInputTypes } from '@angular/cdk/platform';\nimport * as i4 from '@angular/cdk/text-field';\nimport { TextFieldModule } from '@angular/cdk/text-field';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Optional, Self, Inject, Input, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport * as i3 from '@angular/material/core';\nimport { mixinErrorState, MatCommonModule, ErrorStateMatcher } from '@angular/material/core';\nimport * as i5 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit',\n];\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nconst _MatInputBase = mixinErrorState(class {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /**\n     * Form control bound to the component.\n     * Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n        /**\n         * Emits whenever the component state changes and should cause the parent\n         * form field to update. Implemented as part of `MatFormFieldControl`.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n    }\n});\n/** Directive that allows a native input to work inside a `MatFormField`. */\nclass MatInput extends _MatInputBase {\n    constructor(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, \n    // TODO: Remove this once the legacy appearance has been removed. We only need\n    // to inject the form field for determining whether the placeholder has been promoted.\n    _formField) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._autofillMonitor = _autofillMonitor;\n        this._formField = _formField;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week',\n        ].filter(t => getSupportedInputTypes().has(t));\n        this._iOSKeyupListener = (event) => {\n            const el = event.target;\n            // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n            // indicate different things. If the value is 0, it means that the caret is at the start\n            // of the input, whereas a value of `null` means that the input doesn't support\n            // manipulating the selection range. Inputs that don't support setting the selection range\n            // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n            // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n            if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n                // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                // `1, 1` fixes it for the first time that you type text and\n                // then hold delete. Toggling to `1, 1` and then back to\n                // `0, 0` seems to completely fix it.\n                el.setSelectionRange(1, 1);\n                el.setSelectionRange(0, 0);\n            }\n        };\n        const element = this._elementRef.nativeElement;\n        const nodeName = element.nodeName.toLowerCase();\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular(() => {\n                _elementRef.nativeElement.addEventListener('keyup', this._iOSKeyupListener);\n            });\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        this._isInFormField = !!_formField;\n        if (this._isNativeSelect) {\n            this.controlType = element.multiple\n                ? 'mat-native-select-multiple'\n                : 'mat-native-select';\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Input type of the element. */\n    get type() {\n        return this._type;\n    }\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() {\n        return this._inputValueAccessor.value;\n    }\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /** Whether the element is readonly. */\n    get readonly() {\n        return this._readonly;\n    }\n    set readonly(value) {\n        this._readonly = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n        if (this._platform.IOS) {\n            this._elementRef.nativeElement.removeEventListener('keyup', this._iOSKeyupListener);\n        }\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n        // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n        this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n        // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n        // screen readers will read it out twice: once from the label and once from the attribute.\n        // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n        // the only one that supports promoting the placeholder to a label.\n        const formField = this._formField;\n        const placeholder = formField && formField.appearance === 'legacy' && !formField._hasLabel?.()\n            ? null\n            : this.placeholder;\n        if (placeholder !== this._previousPlaceholder) {\n            const element = this._elementRef.nativeElement;\n            this._previousPlaceholder = placeholder;\n            placeholder\n                ? element.setAttribute('placeholder', placeholder)\n                : element.removeAttribute('placeholder');\n        }\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        let validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._isNeverEmpty() &&\n            !this._elementRef.nativeElement.value &&\n            !this._isBadInput() &&\n            !this.autofilled);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            const selectElement = this._elementRef.nativeElement;\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return (this.focused ||\n                selectElement.multiple ||\n                !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label));\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n    /** Whether the form control is a native select that is displayed inline. */\n    _isInlineSelect() {\n        const element = this._elementRef.nativeElement;\n        return this._isNativeSelect && (element.multiple || element.size > 1);\n    }\n}\nMatInput.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatInput, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: i2.NgControl, optional: true, self: true }, { token: i2.NgForm, optional: true }, { token: i2.FormGroupDirective, optional: true }, { token: i3.ErrorStateMatcher }, { token: MAT_INPUT_VALUE_ACCESSOR, optional: true, self: true }, { token: i4.AutofillMonitor }, { token: i0.NgZone }, { token: MAT_FORM_FIELD, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatInput.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: MatInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],\\n      input[matNativeControl], textarea[matNativeControl]\", inputs: { disabled: \"disabled\", id: \"id\", placeholder: \"placeholder\", name: \"name\", required: \"required\", type: \"type\", errorStateMatcher: \"errorStateMatcher\", userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], value: \"value\", readonly: \"readonly\" }, host: { listeners: { \"focus\": \"_focusChanged(true)\", \"blur\": \"_focusChanged(false)\", \"input\": \"_onInput()\" }, properties: { \"class.mat-input-server\": \"_isServer\", \"attr.id\": \"id\", \"attr.data-placeholder\": \"placeholder\", \"disabled\": \"disabled\", \"required\": \"required\", \"attr.name\": \"name || null\", \"attr.readonly\": \"readonly && !_isNativeSelect || null\", \"class.mat-native-select-inline\": \"_isInlineSelect()\", \"attr.aria-invalid\": \"(empty && required) ? null : errorState\", \"attr.aria-required\": \"required\" }, classAttribute: \"mat-input-element mat-form-field-autofill-control\" }, providers: [{ provide: MatFormFieldControl, useExisting: MatInput }], exportAs: [\"matInput\"], usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatInput, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                    exportAs: 'matInput',\n                    host: {\n                        /**\n                         * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                         */\n                        'class': 'mat-input-element mat-form-field-autofill-control',\n                        '[class.mat-input-server]': '_isServer',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[attr.id]': 'id',\n                        // At the time of writing, we have a lot of customer tests that look up the input based on its\n                        // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n                        // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n                        '[attr.data-placeholder]': 'placeholder',\n                        '[disabled]': 'disabled',\n                        '[required]': 'required',\n                        '[attr.name]': 'name || null',\n                        '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                        '[class.mat-native-select-inline]': '_isInlineSelect()',\n                        // Only mark the input as invalid for assistive technology if it has a value since the\n                        // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n                        '[attr.aria-invalid]': '(empty && required) ? null : errorState',\n                        '[attr.aria-required]': 'required',\n                        '(focus)': '_focusChanged(true)',\n                        '(blur)': '_focusChanged(false)',\n                        '(input)': '_onInput()',\n                    },\n                    providers: [{ provide: MatFormFieldControl, useExisting: MatInput }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: i2.NgControl, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }, { type: i2.NgForm, decorators: [{\n                    type: Optional\n                }] }, { type: i2.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }, { type: i3.ErrorStateMatcher }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [MAT_INPUT_VALUE_ACCESSOR]\n                }] }, { type: i4.AutofillMonitor }, { type: i0.NgZone }, { type: i5.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }] }]; }, propDecorators: { disabled: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], errorStateMatcher: [{\n                type: Input\n            }], userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], value: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatInputModule {\n}\nMatInputModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatInputModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: MatInputModule, declarations: [MatInput], imports: [TextFieldModule, MatFormFieldModule, MatCommonModule], exports: [TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule,\n        MatInput] });\nMatInputModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatInputModule, providers: [ErrorStateMatcher], imports: [TextFieldModule, MatFormFieldModule, MatCommonModule, TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatInputModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [MatInput],\n                    imports: [TextFieldModule, MatFormFieldModule, MatCommonModule],\n                    exports: [\n                        TextFieldModule,\n                        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n                        // be used together with `MatFormField`.\n                        MatFormFieldModule,\n                        MatInput,\n                    ],\n                    providers: [ErrorStateMatcher],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, getMatInputUnsupportedTypeError };\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { UserCardComponent } from './user-card/user-card.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [UserCardComponent],\n  exports: [UserCardComponent],\n})\nexport class UiModule {}\n","<article *ngIf=\"user\">\n  <h3 class=\"mb-2\" i18n=\"@@userCardHeader\">User card</h3>\n  <div i18n=\"@@userFirstNameLabel\">First name: {{ user.firstName }}</div>\n  <div i18n=\"@@userLastNameLabel\">Last name: {{ user.lastName }}</div>\n  <div i18n=\"@@userEmailLabel\">Email: {{ user.email }}</div>\n</article>\n","import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\n\nimport { User } from '@playground/domain';\n\n@Component({\n  selector: 'playground-user-card',\n  templateUrl: './user-card.component.html',\n  styleUrls: ['./user-card.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class UserCardComponent {\n\n  @Input() user?: User;\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { HomeComponent } from './home.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomeComponent,\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class HomeRoutingModule { }\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Meta } from '@angular/platform-browser';\n\nimport { User } from '@playground/domain';\n\n@Component({\n  selector: 'playground-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    class: 'd-block p-3'\n  }\n})\nexport class HomeComponent implements OnInit {\n\n  readonly now = new Date();\n\n  readonly user: User = {\n    firstName: 'Viatcheslav',\n    lastName: 'Zadorozhniy',\n    gender: 'male',\n    email: 'viatcheslav.zadorozhniy@gmail.com',\n  };\n\n  // https://angular.io/api/localize/init/$localize#description\n  // https://angular.io/guide/i18n-common-prepare#mark-text-in-component-code\n  readonly greetingMessage = $localize`:@@greetingMessage:Glad to see you again, ${this.user.firstName} ${this.user.lastName}`;\n\n  constructor(\n    private readonly meta: Meta,\n  ) {}\n\n  ngOnInit(): void {\n    this.meta.addTag({\n      name: 'description',\n      content: $localize`:@@homePageMetaDescription:Homepage meta description`,\n    });\n  }\n\n}\n","<!-- Add metadata for translation -->\n<!-- https://angular.io/guide/i18n-common-prepare#i18n-metadata-for-translation -->\n<h1 i18n=\"User welcome|An introduction header for the i18n app@@introductionHeader\">Welcome to i18n-app!</h1>\n<p>{{ greetingMessage }}</p>\n\n<!-- Mark element attributes for translations -->\n<!-- https://angular.io/guide/i18n-common-prepare#mark-element-attributes-for-translations -->\n<img\n  src=\"./assets/nx-logo.png\"\n  alt=\"Nx - Smart, Extensible Build Framework\"\n  i18n-alt=\"@@logoAlternativeText\"\n  width=\"50\"\n  height=\"31\"\n  class=\"mb-2\"\n/>\n<br>\n<!-- Translate inline text without HTML element -->\n\n<!-- https://angular.io/guide/i18n-common-prepare#translate-inline-text-without-html-element -->\n<ng-container i18n>Text without an element</ng-container>\n\n<div>\n  <!-- Format data based on locale (using built-in pipes) -->\n  <!-- https://angular.io/guide/i18n-common-format-data-locale -->\n  <h2 i18n=\"@@builtInPipesSectionTitle\">Built-in pipes</h2>\n  <ul class=\"px-3\">\n    <li class=\"mb-2\">\n      <ng-container i18n=\"Date label@@dateLabel\">Date</ng-container>: {{ now | date:'mediumDate' }}\n    </li>\n\n    <li class=\"mb-2\">\n      <ng-container i18n=\"Time label@@timeLabel\">Time</ng-container>: {{ now | date:'mediumTime' }}\n    </li>\n\n    <li class=\"mb-2\">\n      <ng-container i18n=\"Currency label@@currencyLabel\">Currency</ng-container>: {{ 12.34 | currency }}\n    </li>\n  </ul>\n</div>\n\n<!-- Use the same ID multiple times -->\n<!-- https://angular.io/guide/i18n-optional-manage-marked-text#define-unique-custom-ids -->\n<form class=\"mb-3\">\n  <h2 i18n=\"@@feedbackFormTitle\">Feedback form</h2>\n\n  <div>\n    <mat-form-field class=\"max-inline-100\">\n      <!-- https://angular.io/guide/i18n-common-prepare#icu-expressions -->\n      <mat-label i18n=\"@@feedbackFormGreetingMessage\">Leave you feedback, {user.gender, select, male {Mr.} female {Ms.}} {{ user.firstName }}</mat-label>\n      <textarea matInput name=\"feedback\"></textarea>\n    </mat-form-field>\n  </div>\n\n  <button type=\"button\" i18n=\"@@submitButton\" mat-raised-button color=\"primary\">Submit</button>\n</form>\n\n<!-- Component from the library -->\n<playground-user-card [user]=\"user\"></playground-user-card>\n\n<div class=\"mt-3\">\n  <a class=\"text-link\" routerLink=\"/demo\">Demo</a>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\n\nimport { UiModule } from '@playground/ui';\n\nimport { HomeRoutingModule } from './home-routing.module';\nimport { HomeComponent } from './home.component';\n\n@NgModule({\n  declarations: [HomeComponent],\n  imports: [\n    UiModule,\n    CommonModule,\n    MatButtonModule,\n    HomeRoutingModule,\n    MatInputModule,\n    MatFormFieldModule,\n  ],\n})\nexport class HomeModule {}\n"],"names":["listenerOptions","normalizePassiveListenerOptions","passive","AutofillMonitor","constructor","_platform","_ngZone","this","_monitoredElements","Map","monitor","elementOrRef","isBrowser","EMPTY","element","coerceElement","info","get","subject","result","Subject","cssClass","listener","event","animationName","classList","contains","remove","run","next","target","isAutofilled","add","runOutsideAngular","addEventListener","set","unlisten","removeEventListener","stopMonitoring","complete","delete","ngOnDestroy","forEach","_info","ɵfac","i0","i1","ɵprov","factory","TextFieldModule","ɵmod","ɵinj","MAT_INPUT_VALUE_ACCESSOR","InjectionToken","MAT_INPUT_INVALID_TYPES","nextUniqueId","_MatInputBase","mixinErrorState","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","stateChanges","MatInput","_elementRef","inputValueAccessor","_autofillMonitor","ngZone","_formField","super","_uid","focused","controlType","autofilled","_disabled","_type","_readonly","_neverEmptyInputTypes","filter","t","getSupportedInputTypes","has","_iOSKeyupListener","el","value","selectionStart","selectionEnd","setSelectionRange","nativeElement","nodeName","toLowerCase","_inputValueAccessor","_previousNativeValue","id","IOS","_isServer","_isNativeSelect","_isTextarea","_isInFormField","multiple","disabled","coerceBooleanProperty","_id","required","_required","control","hasValidator","Validators","type","_validateType","readonly","ngAfterViewInit","subscribe","ngOnChanges","ngDoCheck","updateErrorState","_dirtyCheckNativeValue","_dirtyCheckPlaceholder","focus","options","_focusChanged","isFocused","_onInput","formField","placeholder","appearance","_hasLabel","_previousPlaceholder","setAttribute","removeAttribute","newValue","indexOf","_isNeverEmpty","_isBadInput","validity","badInput","empty","shouldLabelFloat","selectElement","firstOption","selectedIndex","label","setDescribedByIds","ids","length","join","onContainerClick","_isInlineSelect","size","i2","i3","i4","MAT_FORM_FIELD","ɵdir","selectors","ctx","provide","MatFormFieldControl","useExisting","MatInputModule","ErrorStateMatcher","imports","MatFormFieldModule","MatCommonModule","UiModule","CommonModule","UserCardComponent","$localize","routes","path","component","HomeComponent","meta","Date","firstName","lastName","gender","email","user","ngOnInit","addTag","name","content","i18n_17","HomeRoutingModule","RouterModule","HomeModule","MatButtonModule"],"sourceRoot":"webpack:///"}