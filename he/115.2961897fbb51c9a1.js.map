{"version":3,"file":"115.2961897fbb51c9a1.js","mappings":"6OAgBEA,kBAGCA,SAA2BA,8BAA3BA,yCCNG,MAAOC,EAYXC,YACmBC,EACAC,GADAC,WACAA,sBAVFA,qBAAkB,CACjC,OACA,MACA,OACA,UACA,aAMC,CAUGC,eAAY,qCAChB,GAAM,mBAAoBC,EAAKH,eAAeI,aAK9C,IACE,MAAMC,EAAiB,IAAIC,eAAeH,EAAKI,oBAAqBJ,EAAKK,4BAC5CH,EAAeI,mBAG1CN,EAAKO,yBAAyB,gCAGhCP,EAAKQ,YAAYN,SACVO,GACPT,EAAKO,0BAA2BE,GAAmB,IAAIC,iBAdvDV,EAAKO,yBAAyB,yDAe/B,EAjBe,EAkBlB,CAEQI,8BAEN,MAAO,CACLC,YAAa,OACbC,WAAY,EACZC,gBAAiB,EACjBC,aAAc,CAMZC,aAAc,oBAEhBC,sBAAuB,CAAC,CACtBC,KAAM,OACNC,WAAY,CACVC,mBAAoB,CAAC,WAAY,kBACjCC,oBAAqB,CAAC,OAAQ,WAAY,UAAW,MAAO,aAAc,SAE5EC,0BAA2B,CACzBJ,KAAM,kBAKNC,WAAY,CACVI,QAAW,UACXC,kBAAqB,+BAK/B,CAEQpB,oBACN,MAAO,CACL,CACEqB,iBAAkB,yBAClBC,KAAM5B,KAAKa,+BAEb,CACEc,iBAAkB,aAClBC,KAAM,CACJC,kBAAmB7B,KAAK8B,kBAG5B,CACEH,iBAAkB,8BAClBC,KAAM,CACFG,QAAS,EACTF,kBAAmB7B,KAAK8B,gBACxBE,YAAa,KACbC,mBAAoB,0BACpBC,qBAAsB,CAAC,gBAAiB,iBAAkB,iBAIpE,CAEQ3B,oBACN,MAAO,CACL4B,MAAO,CACLC,MAAO,WACPC,OAAQ,CAAEC,SAAU,MAAOC,MAAO,UAEpCC,aAAc,CACZ,CACEJ,MAAO,2BACPC,OAAQ,CAAEC,SAAU,MAAOC,MAAO,UAEpC,CACEH,MAAO,8BACPC,OAAQ,CAAEC,SAAU,MAAOC,MAAO,WAI1C,CAEQ9B,yBAAyBgC,GAC/BzC,KAAKyC,sBAAwBA,EAC7BzC,KAAKF,IAAI4C,cACX,CAEchC,YAAYN,GAA8B,qCACtD,MAAMuC,QAAwBvC,EAAewC,OAG7CC,WAAW,KACTF,EAAgBG,SAAS,WACzBC,EAAKtC,yBAAyB,uCAAsC,EACnE,IAAM,EAP6C,EAQxD,CAACuC,kDAzIUpD,GAAiBqD,+DAAjBrD,EAAiBsD,21BDb9BvD,cAAIA,oBAAQA,QAEZA,qBAAsB,QAChBA,kCAAsBA,QAE1BA,iBAAuD,cAKnDA,gCAASwD,gBAAc,GACxBxD,2BAAeA,QAEhBA,eAAKA,uDAA2CA,UAGlDA,wBAIFA,QAEAA,mBAAmB,SACbA,gCAAmBA,QAEvBA,kBAAoC,oBAApCA,CAAoC,gBAErBA,yBAAYA,QACvBA,oBAMFA,QAEAA,2BAAgB,gBACHA,wBAAWA,QACtBA,oBAQFA,UAGFA,kBAAoC,oBAApCA,CAAoC,gBAErBA,wBAAWA,QACtBA,oBASFA,QAEAA,2BAAgB,gBACHA,0BAAaA,QACxBA,oBASFA,UAGFA,sBAICA,wBAAWA,iBAhETA,gHEZL,MAAMyD,EAAiB,CACrB,CACEC,KAAM,GACNC,UAAW1D,IAQT,MAAO2D,EAAqBP,kDAArBO,EAAqB,sCAArBA,IAAqBP,wCAHtBQ,cAAsBJ,GACtBI,QCKN,MAAOC,EAAcT,kDAAdS,EAAc,sCAAdA,IAAcT,wCAPvBU,KACAC,IACAC,KACAC,KACAN","names":["i0","PaymentsComponent","constructor","cdr","platformShield","this","makeDonation","_this","nativeWindow","paymentRequest","PaymentRequest","getPaymentMethods","getPaymentDetails","canMakePayment","setDonationStatusMessage","makePayment","error","toString","getGooglePaymentDataRequest","environment","apiVersion","apiVersionMinor","merchantInfo","merchantName","allowedPaymentMethods","type","parameters","allowedAuthMethods","allowedCardNetworks","tokenizationSpecification","gateway","gatewayMerchantId","supportedMethods","data","supportedNetworks","paymentNetworks","version","countryCode","merchantIdentifier","merchantCapabilities","total","label","amount","currency","value","displayItems","donationStatusMessage","markForCheck","paymentResponse","show","setTimeout","complete","_this2","static","core","selectors","ctx","routes","path","component","PaymentsRoutingModule","RouterModule","PaymentsModule","CommonModule","MatInputModule","MatButtonModule","MatFormFieldModule"],"sourceRoot":"webpack:///","sources":["./libs/demo/src/lib/payments/payments.component.html","./libs/demo/src/lib/payments/payments.component.ts","./libs/demo/src/lib/payments/payments-routing.module.ts","./libs/demo/src/lib/payments/payments.module.ts"],"sourcesContent":["<h2>Payments</h2>\n\n<section class=\"mb-5\">\n  <h3>Payment request dialog</h3>\n\n  <div class=\"d-flex flex-wrap align-items-center gap-2\">\n    <button\n      type=\"button\"\n      mat-raised-button\n      color=\"primary\"\n      (click)=\"makeDonation()\"\n    >Make a donation</button>\n\n    <div>(demo only, no actual payment is processed)</div>\n  </div>\n\n  <div\n    *ngIf=\"!!donationStatusMessage\"\n    class=\"mt-2\"\n  >{{ donationStatusMessage }}</div> \n</section>\n\n<form class=\"mb-3\">\n  <h3>Credit card payment</h3>\n\n  <div class=\"d-flex flex-wrap gap-2\">\n    <mat-form-field>\n      <mat-label>Name on card</mat-label>\n      <input\n        matInput\n        type=\"text\"\n        name=\"name\"\n        autocomplete=\"cc-name\"\n      >\n    </mat-form-field>\n\n    <mat-form-field>\n      <mat-label>Card number</mat-label>\n      <input\n        matInput\n        type=\"text\"\n        pattern=\"[0-9]+\"\n        name=\"card-number\"\n        inputmode=\"numeric\"\n        autocomplete=\"cc-number\"\n      >\n    </mat-form-field>\n  </div>\n\n  <div class=\"d-flex flex-wrap gap-2\">\n    <mat-form-field>\n      <mat-label>Expiry date</mat-label>\n      <input\n        matInput\n        type=\"text\"\n        name=\"expiry-date\"\n        autocomplete=\"cc-exp\"\n        placeholder=\"MM/YY\"\n        minlength=\"4\"\n        pattern=\"[0-9/]+\"\n      >\n    </mat-form-field>\n\n    <mat-form-field>\n      <mat-label>Security code</mat-label>\n      <input\n        matInput\n        type=\"text\"\n        name=\"security-code\"\n        inputmode=\"numeric\"\n        minlength=\"3\"\n        maxlength=\"4\"\n        pattern=\"[0-9]+\"\n      >\n    </mat-form-field>\n  </div>\n\n  <button\n    type=\"button\"\n    mat-raised-button\n    color=\"primary\"\n  >Pay $300.00</button>\n</form>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component } from '@angular/core';\n\nimport { PlatformShieldService } from '@playground/shared';\n\n@Component({\n  selector: 'playground-payments',\n  templateUrl: './payments.component.html',\n  styleUrls: ['./payments.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    class: 'full-size p-3 overflow-auto'\n  },\n})\nexport class PaymentsComponent {\n\n  donationStatusMessage: string | undefined;\n\n  private readonly paymentNetworks = [\n    'amex',\n    'jcb',\n    'visa',\n    'maestro',\n    'mastercard',\n  ];\n\n  constructor(\n    private readonly cdr: ChangeDetectorRef,\n    private readonly platformShield: PlatformShieldService,\n  ) {}\n\n  /*\n   * Resources:\n   * https://whatwebcando.today/payments.html\n   * https://web.dev/setting-up-a-payment-method/\n   * https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest/PaymentRequest\n   *\n   * TODO: add support for ApplePayPaymentRequest (https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymentrequest)\n   */\n  async makeDonation(): Promise<void> {\n    if (!('PaymentRequest' in this.platformShield.nativeWindow)) {\n      this.setDonationStatusMessage('Your browser/device does not support Web Payments API.');\n      return;\n    }\n\n    try {\n      const paymentRequest = new PaymentRequest(this.getPaymentMethods(), this.getPaymentDetails());\n      const canMakePayment = await paymentRequest.canMakePayment();\n\n      if (!canMakePayment) {\n        this.setDonationStatusMessage('The payment can not proceed.');\n      }\n\n      this.makePayment(paymentRequest);\n    } catch (error) {\n      this.setDonationStatusMessage(((error as Error) || '').toString());\n    }\n  }\n\n  private getGooglePaymentDataRequest(): Record<string, string | number | object> {\n    // https://developers.google.com/pay/api/web/guides/paymentrequest/tutorial\n    return {\n      environment: 'TEST',\n      apiVersion: 2,\n      apiVersionMinor: 0,\n      merchantInfo: {\n        /*\n         * A merchant ID is available after approval by Google.\n         * @see {@link https://developers.google.com/pay/api/web/guides/test-and-deploy/integration-checklist}\n         * merchantId: '12345678901234567890',\n         */\n        merchantName: 'Example Merchant'\n      },\n      allowedPaymentMethods: [{\n        type: 'CARD',\n        parameters: {\n          allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n          allowedCardNetworks: ['AMEX', 'DISCOVER', 'INTERAC', 'JCB', 'MASTERCARD', 'VISA']\n        },\n        tokenizationSpecification: {\n          type: 'PAYMENT_GATEWAY',\n          /*\n           * Check with your payment gateway on the parameters to pass.\n           * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#gateway}\n           */\n          parameters: {\n            'gateway': 'example',\n            'gatewayMerchantId': 'exampleGatewayMerchantId'\n          }\n        }\n      }]\n    };\n  }\n\n  private getPaymentMethods(): PaymentMethodData[] {\n    return [\n      {\n        supportedMethods: 'https://google.com/pay',\n        data: this.getGooglePaymentDataRequest(),\n      },\n      {\n        supportedMethods: 'basic-card', // Note that this method is deprecated and its support will be removed.\n        data: {\n          supportedNetworks: this.paymentNetworks, \n        }\n      },\n      {\n        supportedMethods: 'https://apple.com/apple-pay',\n        data: {\n            version: 2,\n            supportedNetworks: this.paymentNetworks,\n            countryCode: 'UK',\n            merchantIdentifier: 'viatcheslav-zadorozhniy',\n            merchantCapabilities: ['supportsDebit', 'supportsCredit', 'supports3DS']\n        }\n      },\n    ];\n  }\n\n  private getPaymentDetails(): PaymentDetailsInit {\n    return {\n      total: {\n        label: 'Donation',\n        amount: { currency: 'USD', value: '10.00' },\n      },\n      displayItems: [\n        {\n          label: 'Original donation amount',\n          amount: { currency: 'USD', value: '15.00' },\n        },\n        {\n          label: 'Friends and family discount',\n          amount: { currency: 'USD', value: '-5.00' },\n        },\n      ]\n    };\n  }\n\n  private setDonationStatusMessage(donationStatusMessage: string): void {\n    this.donationStatusMessage = donationStatusMessage;\n    this.cdr.markForCheck();\n  }\n\n  private async makePayment(paymentRequest: PaymentRequest): Promise<void> {\n    const paymentResponse = await paymentRequest.show();\n\n    // Emulate payment sending to the server.\n    setTimeout(() => {\n      paymentResponse.complete('success');\n      this.setDonationStatusMessage('Your donation was sent successfully.');\n    }, 1000);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { PaymentsComponent } from './payments.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PaymentsComponent,\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PaymentsRoutingModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\n\nimport { PaymentsRoutingModule } from './payments-routing.module';\nimport { PaymentsComponent } from './payments.component';\n\n@NgModule({\n  declarations: [PaymentsComponent],\n  imports: [\n    CommonModule,\n    MatInputModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    PaymentsRoutingModule,\n  ],\n})\nexport class PaymentsModule {}\n"],"x_google_ignoreList":[]}